@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["Data Store Settings"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.MessageBox = false;

    var dbDetails = ViewBag.DBConfig as DatabaseConfiguration;
    ViewBag.dbType = dbDetails.ServerType == DatabaseType.MSSQL ? "MSSQL" : dbDetails.ServerType == DatabaseType.PostgreSQL ? "PostgreSQL" : dbDetails.ServerType == DatabaseType.MySQL ? "MySQL" : "SQLite";
    ViewBag.authorizationType = !string.IsNullOrEmpty(dbDetails.UserName) ? "SQL" : "windows";
    ViewBag.serverName = !string.IsNullOrEmpty(dbDetails.ServerName) ? dbDetails.ServerName : string.Empty;
    ViewBag.postgrePortNumber = !string.IsNullOrEmpty(dbDetails.Port) && dbDetails.ServerType == DatabaseType.PostgreSQL ? dbDetails.Port : "5432";
    ViewBag.mysqlPortNumber = !string.IsNullOrEmpty(dbDetails.Port) && dbDetails.ServerType == DatabaseType.MySQL ? dbDetails.Port : "3306";
    ViewBag.databaseName = !string.IsNullOrEmpty(dbDetails.DatabaseName) ? dbDetails.DatabaseName : string.Empty;
    ViewBag.additionalParameter = !string.IsNullOrEmpty(dbDetails.ImDbAdditionalParameters) ? dbDetails.ImDbAdditionalParameters : string.Empty;
    ViewBag.username = !string.IsNullOrEmpty(dbDetails.UserName) ? dbDetails.UserName : string.Empty;
    ViewBag.maintenanceDatabase = !string.IsNullOrEmpty(dbDetails.MaintenanceDatabase) ? dbDetails.MaintenanceDatabase : "postgres";
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.DataStoreSettings);
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var helpSiteBaseUrl = ServerAppConfig.AppSettings.Documentation.BaseUri;
    var mssqlConnectionParameterHelpLink = (ServerAppConfig.AllowCustomHelpLink ? string.Empty : helpSiteBaseUrl) + GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.MSSQLConnectionParameters);
    var mysqlConnectionParameterHelpLink = (ServerAppConfig.AllowCustomHelpLink ? string.Empty : helpSiteBaseUrl) + GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.MySQLConnectionParameters);
    var postgresqlConnectionParameterHelpLink = (ServerAppConfig.AllowCustomHelpLink ? string.Empty : helpSiteBaseUrl) + GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.PostgreSQLConnectionParameters);
    var dbConnectionParameterHelpLink = ViewBag.dbType == "MSSQL" ? mssqlConnectionParameterHelpLink : ViewBag.dbType == "PostgreSQL" ? postgresqlConnectionParameterHelpLink : mysqlConnectionParameterHelpLink;

    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var scopeList = ServerAppConfig.SettingsScopesList;
    var canShowAdminMenu = _identityResponse.IsAdmin || model[SettingsScopes.All] || model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() > 1 || (model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() == 1 && (model[PermissionEntity.UsersandGroups] || model[PermissionEntity.SpecificGroup] || model[PermissionEntity.AllGroups])) || model[PermissionEntity.UsersandGroups];
}

@section scripts{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/intermediatedb-configuration.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/intermediatedb-configuration.min.js"></script>
    </environment>

    <script>
        var getAllDatabaseUrl = "@Url.Action("GetAllDatabase", "InterMediateDB")";
        var updateIntermediateDBUrl = "@Url.Action("UpdateIntermediateDB", "InterMediateDB")";
        var connectDatabaseUrl = "@Url.Action("ConnectDatabase", "InterMediateDB")";
        var generateIntermediateDatabaseUrl = "@Url.Action("GenerateIntermediateDatabase", "InterMediateDB")";
        var isSelfHosted = @Json.Serialize(@ServerAppConfig.IsSelfHosted);
        var maintenanceDb = "@ViewBag.maintenanceDatabase";
        var postgrePortNumber = "@ViewBag.postgrePortNumber";
        var mysqlPortNumber = "@ViewBag.mysqlPortNumber";
        var mssqlConnectionParameterHelpLink = "@mssqlConnectionParameterHelpLink";
        var mysqlConnectionParameterHelpLink =  "@mysqlConnectionParameterHelpLink";
        var postgresqlConnectionParameterHelpLink = "@postgresqlConnectionParameterHelpLink";
    </script>
}

@section MainSection{

    @await Html.PartialAsync("_AdminMenu")

<div id="look-and-feel-container" class="bi-page-container @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")">
    <div class="bi-page-content col-xs-12 no-padding">
        <div id="datastore-settings-header" class="col-xs-12 bi-page-header">
            <hgroup class="bi-page-header-description">
                <h1 class="h2 page-title">
                    @T["Data Store Settings"]
                </h1>
                <h5 class="page-description">
                    @T["Database configuration for the intermediate data source."]
                </h5>
            </hgroup>
        </div>

        <div id="look-and-feel-form" class="col-xs-12 form-horizontal bi-page-body" autocomplete="off">
            <div class="col-xs-12 no-padding">
                    <div class="system-settings-page-container col-xs-12 no-padding" id="system-settings-db-selection-container">
                        <div class="system-settings-db-selection-field col-xs-12 no-padding">
                            @*<div class="col-xs-12 form-group">
                                @Html.Label("intermediate-db", "[[[Database]]]", new { @class = "app-textbox-label col-xs-2" })
                                <div class="col-xs-10 database-types">
                                    <div id="database-type-dropdown" class="system-settings-startup-page-fields database-dropdown-margin">
                                        <select id="database-type" class="selectpicker system-settings-startup-page-fields db-fields" style="display: none;">
                                            <option class="no-margin-dropdown-ul" value="SQLite" @(ViewBag.dbType= ="SQLite" ? "Selected" : string.Empty )>
                                                [[[SQLite]]]
                                            </option>
                                            <option class="no-margin-dropdown-ul" value="MSSQL" @(ViewBag.dbType= ="MSSQL" ? "Selected" : string.Empty)>[[[SQL Server]]]</option>
                                        </select>
                                    </div>
                                    <div id="connection-validation" class="txt-holder">
                                        <div class="validation-errors"></div>
                                    </div>
                                </div>
                            </div>*@

                            <form id="db-content-holder" class="no-padding col-xs-12 no-padding @(ViewBag.dbType == "MSSQL" ? string.Empty : "display-none") content-display text-wrap show-sql-content" autocomplete="off">
                                <div class="col-xs-12 no-padding settings-page-fields">
                                    @Html.Label("intermediate-db", T["Server Type"].Value, new { @class = "app-textbox-label" })
                                    <div id="database-type-dropdown" class="txt-holder validation-padding">
                                        <select id="database-type" class="selectpicker no-padding" data-width="100%">
                                            <option class="no-margin-dropdown-ul" value="MSSQL" selected="@(ViewBag.dbType == "MSSQL")">SQL Server</option>
                                            <option class="no-margin-dropdown-ul" value="PostgreSQL" selected="@(ViewBag.dbType == "PostgreSQL")">Postgre SQL</option>
                                            <option class="no-margin-dropdown-ul" value="MySQL" selected="@(ViewBag.dbType == "MySQL")">MySQL</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin data-base-fields">
                                    @Html.Label("intermediate-db", T["Server Name"].Value, new { @class = "app-textbox-label" })
                                    <input type="text" id="txt-servername" name="servername" class="form-control validation-padding txt-holder" value="@ViewBag.serverName" placeholder="@T["Server name"]" autocomplete="off">
                                    <span class="startup-validation  validation-txt-errors"></span>
                                </div>
                                <div id="authentication-dropdown" class="col-xs-12 no-padding hide settings-page-fields form-fields-top-margin">
                                    @Html.Label("intermediate-db", T["Authentication Mode"].Value, new { @class = "app-textbox-label" })
                                    <div id="auth-type-dropdown" class="txt-holder validation-padding">
                                        <select id="check-windows" class="selectpicker no-padding">
                                            <option value="sql" selected="@(ViewBag.authorizationType == "SQL")">@string.Format(T["{0} Authentication"].Value,"SQL")</option>
                                            <option value="windows" selected="@(ViewBag.authorizationType == "windows")">@string.Format(T["{0} Authentication"].Value,"Windows")</option>
                                        </select>
                                    </div>
                                </div>
                                <div id="port-number-dropdown" class="hide col-xs-12 no-padding settings-page-fields form-fields-top-margin data-base-fields">
                                    @Html.Label("intermediate-db", T["Port number"].Value, new { @class = "app-textbox-label" })
                                    <input type="text" id="txt-portnumber" name="portnumber" class="form-control txt-holder validation-padding" value="@(ViewBag.dbType == "MySQL" ? ViewBag.mysqlPortNumber : ViewBag.postgrePortNumber)" placeholder="@T["Port number"]" autocomplete="off">
                                    <span class="startup-validation  validation-txt-errors"></span>
                                </div>
                                <div id="maintenance-db-dropdown" class="col-xs-12 no-padding hide settings-page-fields form-fields-top-margin data-base-fields">
                                    <div class="info-label col-xs-12 no-padding">
                                        @Html.Label("intermediate-db", T["Maintenance Database"].Value, new { @class = "app-textbox-label" })
                                        <div class="info-message">
                                           @string.Format(T["The maintenance {0} is a default database for users and applications to connect to. On {1} and above, the maintenance {0} is normally called {2}, and on earlier versions, {3}."].Value, "DB", "PostgreSQL 8.1", "‘postgres’","‘template1’")
                                        </div>
                                    </div>
                                    <input type="text" id="txt-maintenancedb" name="maintenancedatabase" class="form-control txt-holder validation-padding" value="@ViewBag.maintenanceDatabase" placeholder="@T["Maintenance Database"]" autocomplete="off">
                                    <span class="startup-validation  validation-txt-errors"></span>
                                </div>
                                <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin data-base-fields">
                                    @Html.Label("intermediate-db", T["Username"].Value, new { @class = "app-textbox-label" })
                                    <input type="text" id="txt-login" name="username" class="form-control txt-holder validation-padding" value="@ViewBag.username" placeholder="@T["Username"]" autocomplete="off" @(ViewBag.authorizationType == "windows" ? "disabled" : string.Empty)>
                                    <span class="startup-validation validation-txt-errors"></span>
                                </div>
                                <div class="col-xs-12 form-fields-top-margin no-padding data-base-fields">
                                    <div class="col-xs-12 no-padding">
                                        @Html.Label("intermediate-db", @T["Password"].Value, new { @class = "app-textbox-label" })
                                    </div>
                                    <div class="col-xs-12 no-padding settings-page-fields">
                                        <input type="password" id="txt-password-db" name="password" class="form-control txt-holder validation-padding" placeholder="&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;&#9679;" autocomplete="off" @(ViewBag.authorizationType == "windows" ? "disabled" : string.Empty)>
                                        <span id="password-field" class="startup-validation validation-txt-errors"></span>
                                        <div class="su su-eye show-hide-password"></div>
                                        <span id="password-field" class="validation-txt-errors"></span>
                                    </div>
                                </div>
                                <div class="col-xs-12 no-padding settings-page-fields">
                                    <div class="new-db select-database">
                                        <input type="radio" id="new-db" class="css-radio" name="databaseType" value="0" @(ViewBag.databaseName != string.Empty ? string.Empty : "checked")>
                                        <label for="new-db" class="radio-btn-label app-textbox-label"><span class="text">@T["New Database"]</span></label>
                                    </div>
                                    <div class="existing-db select-database">
                                        <input type="radio" id="existing-db" class="css-radio" name="databaseType" value="1" @(ViewBag.databaseName != string.Empty ? "checked" : string.Empty)>
                                        <label for="existing-db" class="radio-btn-label app-textbox-label"><span class="text">@T["Existing Database"]</span></label>
                                    </div>
                                </div>
                                <div id="new-db-form" class="col-xs-12 no-padding settings-page-fields @(ViewBag.databaseName != string.Empty ? "display-none" : string.Empty)">
                                    @Html.Label("intermediate-db", T["Database Name"].Value, new { @class = "app-textbox-label" })
                                    <div class="sql-server-new-db">
                                        <div class="database-name">
                                            <input type="text" id="txt-dbname" name="dbname" class="form-control validation-padding txt-holder" value="@ViewBag.databaseName" placeholder="@T["Database name"]" autocomplete="off">
                                            <span class="startup-validation validation-txt-errors"></span>
                                        </div>
                                    </div>
                                </div>
                                <div id="existing-db-form" class="col-xs-12 no-padding settings-page-fields @(ViewBag.databaseName != string.Empty ? string.Empty : " display-none" )">
                                    @Html.Label("intermediate-db", T["Database Name"].Value, new { @class = "app-textbox-label" })
                                    <div class="sql-server-existing-db">
                                        <input type="text" id="database-name" name="dbname" class="form-control validation-padding txt-holder" value="@ViewBag.databaseName" placeholder="@T["Existing Database name"]" autocomplete="off">
                                        <span class="startup-validation validation-txt-errors"></span>
                                    </div>
                                </div>
                                <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin data-base-fields">
                                    <div class="info-label col-xs-12 no-padding">
                                        @Html.Label("intermediate-db", T["Additional Parameters (Optional)"].Value, new { @class = "no-margin app-textbox-label" })
                                        <div class="info-message">
                                            @T["Additional parameters override input values in the above form."]
                                            @if (!@ServerAppConfig.IsHideHelpLink)
                                            {
                                                <span>
                                                    @Html.Raw(string.Format(T["Please refer to {0}this{1} documentation for connection string parameters."].Value,"<a class='app-hyperlink redirect-link' href='" + dbConnectionParameterHelpLink +"' target='_blank'>","</a>" ) )
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <input type="text" id="additional-db-parameter" name="db-add-parameter" class="form-control txt-holder validation-padding" value="@ViewBag.additionalParameter" placeholder="@T["Additional Parameters"]" autocomplete="off">
                                </div>
                                <div class="col-xs-12 no-padding settings-page-fields">
                                    <div class="col-xs-12 no-padding ssl-checkbox">
                                        <div class="info-label">
                                            @Html.CheckBox("secure-sql-connection", (bool)dbDetails.SslEnabled, new { @class = "material-checkbox" })
                                            @Html.Hidden("secure-sql-connection")
                                            <label for="secure-sql-connection">
                                                @string.Format(T["Enable {0}"].Value,"SSL")
                                            </label>
                                            <div class="info-message checkbox-info">
                                                @string.Format( T["Enable this if the database server is {0} configured. It uses {0} encryption for all data transmitted between the client and the server."].Value,"SSL")
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="connection-validation" class="col-xs-12 no-padding">
                                    <div class="validation-errors validation-bottom"></div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
        </div>

        <div class="bi-page-footer col-xs-12">
            <div class="bi-page-actions col-xs-12 col-md-12 no-margin">
                <a href="@Url.Action("Index", "Home")" class="secondary-button app-btn-secondary pull-right" id="cancel-site-settings" title="">@T["Cancel"]</a>
                <button type="button" title="" id="update-datastore-settings" name="UpdateSystemSettings" class="primary-button app-btn-primary pull-right update-system-settings">
                    @T["Save"]
                </button>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
</div>
}